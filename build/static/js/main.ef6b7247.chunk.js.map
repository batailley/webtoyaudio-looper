{"version":3,"sources":["Bob.js","App.js","index.js"],"names":["Bob","state","selected","this","setState","prevState","nextProps","nextContext","playing","playSound","props","rowIndex","_this$props","first","react_default","a","createElement","onClick","selectToggle","bind","className","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","options","bpm","barLength","barsPerRow","rowsPerScreen","soundsSrc","currentTick","rows","tickDuration","totalTickLength","pattern","_ticker","ticker","assertThisInitialized","sound","play","stop","refTickerInterval","setInterval","clearInterval","screen","i","push","key","rowBuilder","_this$state","row","src_Bob_0","tick","Howl","src","console","log","initialise","length","screenBuilder","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ef6b7247.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Bob.css';\n\nclass Bob extends Component {\n    state = {\n        selected:false\n    };\n    selectToggle() {\n        this.setState(prevState => ({\n            selected: !prevState.selected\n        }));\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.playing && this.state.selected) {\n            nextProps.playSound(this.props.rowIndex);\n        }\n    }\n\n    render() {\n        const {playing, first} = this.props;\n\n        return <div\n        onClick={this.selectToggle.bind(this)}\n            className={'bob' +\n        (first ? ' first' : ' ') +\n        (playing ? ' playing' : ' ') +\n        (this.state.selected ? ' selected' : '')\n        }>\n        </div>\n    }\n}\n\nexport default Bob","import React, { Component } from 'react';\nimport Bob from './Bob.js'\nimport { Howl } from 'howler';\n\nimport './App.css';\n\nclass App extends Component {\n    /* they will be props */\n    options = {\n        bpm: 120,\n        barLength: 4,\n        barsPerRow: 4,\n        rowsPerScreen: 6,\n        soundsSrc: [\n            './sounds/bd04.wav',\n            './sounds/hh04.wav',\n            './sounds/sd04.wav',\n            './sounds/cp02.wav',\n            './sounds/hh01.wav',\n            './sounds/hh02.wav',\n            './sounds/oh02.wav',\n        ]\n    };\n\n    state = {\n        currentTick: 1,\n        rows: [],\n        tickDuration: null,\n        totalTickLength: null,\n        playing: false,\n        pattern: 1\n    };\n\n    constructor() {\n        super();\n        this._ticker = this.ticker.bind(this);\n    }\n\n    playSound(rowIndex) {\n        let rows = this.state.rows;\n        rows[rowIndex].sound.play();\n    }\n\n    ticker() {\n        this.setState(prevState => ({\n            currentTick: (prevState.currentTick + 1) > prevState.totalTickLength ? 1 : (prevState.currentTick + 1)\n        }));\n    }\n\n    play() {\n        if (this.state.playing) {\n            this.stop();\n        } else {\n            this.setState(prevState => ({\n                playing: true\n            }));\n            this.refTickerInterval = setInterval(this._ticker, this.state.tickDuration);\n        }\n    }\n\n    stop() {\n        clearInterval(this.refTickerInterval);\n        this.setState(prevState => ({\n            playing: false\n        }));\n    }\n\n    screenBuilder() {\n        let screen = [];\n        for (let i = 1; i <= this.options.rowsPerScreen; i++) {\n            screen.push(\n                <div className={\"row\"} key={i}>\n                    <div className={\"row-header\"}>\n                        <span className=\"row-number\">{i}</span>\n                        <span>{this.options.soundsSrc[i - 1]}</span>\n                    </div>\n                    <div className={\"row-content\"}>\n                        {this.rowBuilder(i - 1)}\n                    </div>\n                </div>\n            )\n        }\n        return screen;\n    }\n\n    rowBuilder(rowIndex) {\n        const { totalTickLength, currentTick } = this.state;\n        const row = [];\n\n        for (let i = 1; i <= totalTickLength; i++) {\n            row.push(\n                <Bob playing={i === currentTick}\n                    first={(i - 1) % this.options.barLength === 0}\n                    tick={i}\n                    key={i}\n                    currentTick={currentTick}\n                    playSound={this.playSound.bind(this)}\n                    rowIndex={rowIndex}\n                > </Bob>\n            )\n        }\n\n        return row;\n    }\n\n    initialise() {\n        //metrics\n\n        this.setState({\n            tickDuration: (60) / (this.options.bpm * this.options.barLength) * 1000,\n            totalTickLength: this.options.barLength * this.options.barsPerRow\n        });\n        let rows = [];\n        for (let i = 1; i <= this.options.rowsPerScreen; i++) {\n            let sound = new Howl({\n                src: [this.options.soundsSrc[i - 1]]\n            });\n            rows.push({ sound })\n        }\n        console.log(rows);\n        this.setState({\n            rows: rows\n        })\n    }\n\n    componentDidMount() {\n        this.initialise();\n    }\n\n    render() {\n        let play = this.state.playing ? \"play\" : \"\";\n        return (\n            <div className=\"App\">\n                <div className=\"track-header\">\n                    <button className={\"btn btn-play \" + play} onClick={this.play.bind(this)}>play</button>\n                    <button className={\"btn btn-stop \" + play} onClick={this.stop.bind(this)}>stop</button>\n                    <div className={\"track-info\"}><span className={\"bpm\"}>bpm: </span>{this.options.bpm}</div>\n                    <div className={\"track-info\"}><span className={\"pattern\"}>Pattern: </span>{this.state.pattern}</div>\n                    <div className={\"track-info\"}><span className={\"tracks\"}>Tracks: </span>{this.state.rows.length}</div>\n                    <div className={\"track-info\"}><span className={\"tick\"}>Tick: </span>{this.state.currentTick}</div>\n                </div>\n                <div className={\"rows\"}>\n                    {this.screenBuilder()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}