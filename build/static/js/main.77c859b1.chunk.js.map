{"version":3,"sources":["Bob.js","store.js","components/template/template.jsx","components/template/template.listeners.js","components/template/template.reactions.js","components/template/template.container.js","App.js","index.js"],"names":["Component","store","createStore","todos","types","keyValue","add","id","title","Todos","_ref","onClick","react_default","a","createElement","map","_ref2","key","listeners","when","action","drivers","console","log","TodoContainer","inject","getAsArray","Math","random","Template","AppContainer","listen","provider","App","react","template_container","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"+RAGkBA,wBCDZC,EAAQC,YAAY,CACxBC,MAAOC,IAAMC,aAGfJ,EAAME,MAAMG,IAAI,CAAEC,GAAI,EAAGC,MAAO,6BAChCP,EAAME,MAAMG,IAAI,CAAEC,GAAI,GAAIC,MAAO,aAElBP,eCIAQ,EAXD,SAAAC,GAAA,IAAGP,EAAHO,EAAGP,MAAOQ,EAAVD,EAAUC,QAAV,OACZC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQH,QAASA,GAAjB,eACAC,EAAAC,EAAAC,cAAA,UACGX,EAAMY,IAAI,SAAAC,GAAA,IAAGT,EAAHS,EAAGT,GAAIC,EAAPQ,EAAOR,MAAP,OACTI,EAAAC,EAAAC,cAAA,MAAIG,IAAKV,GAAKC,QCAPU,EAJG,CAChBC,YAAK,kBAALA,CCJiC,SAAEC,EAAQnB,EAAOoB,GAClDC,QAAQC,IAAI,0BAA2BH,EAAQnB,EAAOoB,MCKlDG,EAAgBC,YAAO,SAACxB,GAC5B,MAAO,CACLE,MAAOF,EAAME,MAAMuB,aACnBf,QAAS,kBACPV,EAAME,MAAMG,IAAI,CAAEC,GAAIoB,KAAKC,SAAUpB,MAAO,4BAJ5BiB,CAOnBI,GAGGC,EAAeC,YAAOb,EAAPa,CADT,kBAAOnB,EAAAC,EAAAC,cAACU,EAAD,QAEJQ,cAAS/B,EAAT+B,CAAgBF,GCsIhBG,SALH,WACR,OAAOrB,EAAAC,EAAAC,cAACoB,EAAA,SAAD,KACHtB,EAAAC,EAAAC,cAACqB,EAAD,SC/IRC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.77c859b1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Bob.css';\n\nclass Bob extends Component {\n    state = {\n        selected:false\n    };\n    selectToggle() {\n        this.setState(prevState => ({\n            selected: !prevState.selected\n        }));\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.playing && this.state.selected) {\n            nextProps.playSound(this.props.rowIndex);\n        }\n    }\n\n    render() {\n        const {playing, first} = this.props;\n\n        return <div\n        onClick={this.selectToggle.bind(this)}\n            className={'bob' +\n        (first ? ' first' : ' ') +\n        (playing ? ' playing' : ' ') +\n        (this.state.selected ? ' selected' : '')\n        }>\n        </div>\n    }\n}\n\nexport default Bob","import { createStore, types } from 'k-ramel'\n\nconst store = createStore({\n  todos: types.keyValue(),\n})\n\nstore.todos.add({ id: 2, title: 'finish the documentation' }) \nstore.todos.add({ id: 32, title: 'an other' })\n\nexport default store","import React from 'react';\n\nconst Todos = ({ todos, onClick }) => (\n  <div>\n    <button onClick={onClick}>Add a todo!</button>\n    <ul>\n      {todos.map(({ id, title }) => (\n        <li key={id}>{title}</li>\n      ))}\n    </ul>\n  </div>\n)\n\nexport default Todos","import { when } from 'k-ramel'\nimport { placeHolderReaction } from './template.reactions'\n\nconst listeners = [\n  when('@@krf/ADD>TODOS')(placeHolderReaction)\n]\n\nexport default listeners","export const placeHolderReaction = ( action, store, drivers ) => {\n  console.log(' i am a react-ion baby:', action, store, drivers)\n}","import React from 'react'\nimport store from '../../store'\nimport { provider, inject, listen } from '@k-ramel/react'\nimport Template from './template.jsx'\nimport listeners from './template.listeners'\n\nconst TodoContainer = inject((store) => {\n  return {\n    todos: store.todos.getAsArray(),\n    onClick: () => (\n      store.todos.add({ id: Math.random(), title: 'Yo! I am a new todo!' })\n    ),\n  }\n})(Template)\n\nconst App = () => (<TodoContainer />)\nconst AppContainer = listen(listeners)(App)\nexport default provider(store)(AppContainer)","import React, { Fragment } from 'react'\nimport Bob from './Bob.js'\nimport { Howl } from 'howler';\nimport Template from './components/template'\n\n\nimport './App.css';\n\n// eslint-disable-next-line no-undef\n// eslint-disable-next-line no-unused-vars\nclass Hop  {\n    /* they will be props */\n    options = {\n        bpm: 120,\n        barLength: 4,\n        barsPerRow: 4,\n        rowsPerScreen: 6,\n        soundsSrc: [\n            './sounds/bd04.wav',\n            './sounds/hh04.wav',\n            './sounds/sd04.wav',\n            './sounds/cp02.wav',\n            './sounds/hh01.wav',\n            './sounds/hh02.wav',\n            './sounds/oh02.wav',\n        ]\n    };\n\n    state = {\n        currentTick: 1,\n        rows: [],\n        tickDuration: null,\n        totalTickLength: null,\n        playing: false,\n        pattern: 1\n    };\n\n    playSound(rowIndex) {\n        let rows = this.state.rows;\n        rows[rowIndex].sound.play();\n    }\n\n    ticker() {\n        this.setState(prevState => ({\n            currentTick: (prevState.currentTick + 1) > prevState.totalTickLength ? 1 : (prevState.currentTick + 1)\n        }));\n    }\n\n    play() {\n        if (this.state.playing) {\n            this.stop();\n        } else {\n            this.setState(prevState => ({\n                playing: true\n            }));\n            this.refTickerInterval = setInterval(this._ticker, this.state.tickDuration);\n        }\n    }\n\n    stop() {\n        clearInterval(this.refTickerInterval);\n        this.setState(prevState => ({\n            playing: false\n        }));\n    }\n\n    screenBuilder() {\n        let screen = [];\n        for (let i = 1; i <= this.options.rowsPerScreen; i++) {\n            screen.push(\n                <div className={\"row\"} key={i}>\n                    <div className={\"row-header\"}>\n                        <span className=\"row-number\">{i}</span>\n                        <span>{this.options.soundsSrc[i - 1]}</span>\n                    </div>\n                    <div className={\"row-content\"}>\n                        {this.rowBuilder(i - 1)}\n                    </div>\n                </div>\n            )\n        }\n        return screen;\n    }\n\n    rowBuilder(rowIndex) {\n        const { totalTickLength, currentTick } = this.state;\n        const row = [];\n\n        for (let i = 1; i <= totalTickLength; i++) {\n            row.push(\n                <Bob playing={i === currentTick}\n                    first={(i - 1) % this.options.barLength === 0}\n                    tick={i}\n                    key={i}\n                    currentTick={currentTick}\n                    playSound={this.playSound.bind(this)}\n                    rowIndex={rowIndex}\n                > </Bob>\n            )\n        }\n\n        return row;\n    }\n\n    initialise() {\n        //  metrics\n        this.setState({\n            tickDuration: (60) / (this.options.bpm * this.options.barLength) * 1000,\n            totalTickLength: this.options.barLength * this.options.barsPerRow\n        });\n        let rows = [];\n        for (let i = 1; i <= this.options.rowsPerScreen; i++) {\n            let sound = new Howl({\n                src: [this.options.soundsSrc[i - 1]]\n            });\n            rows.push({ sound })\n        }\n        console.log(rows);\n        this.setState({\n            rows: rows\n        })\n    }\n\n    componentDidMount() {\n        this.initialise();\n    }\n\n    render() {\n        let play = this.state.playing ? \"play\" : \"\";\n        return (\n            <div className=\"App\">\n                <div className=\"track-header\">\n                    <button className={\"btn btn-play \" + play} onClick={this.play.bind(this)}>play</button>\n                    <button className={\"btn btn-stop \" + play} onClick={this.stop.bind(this)}>stop</button>\n                    <div className={\"track-info\"}><span className={\"bpm\"}>bpm: </span>{this.options.bpm}</div>\n                    <div className={\"track-info\"}><span className={\"pattern\"}>Pattern: </span>{this.state.pattern}</div>\n                    <div className={\"track-info\"}><span className={\"tracks\"}>Tracks: </span>{this.state.rows.length}</div>\n                    <div className={\"track-info\"}><span className={\"tick\"}>Tick: </span>{this.state.currentTick}</div>\n                </div>\n                <div className={\"rows\"}>\n                    {this.screenBuilder()}\n                </div>\n            </div>\n        );\n    }\n}\nconst App = () => {\n    return <Fragment>\n        <Template />\n    </Fragment>\n}\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}